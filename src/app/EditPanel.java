/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package app;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import java.sql.ResultSet;
import java.time.ZoneId;

/**
 *
 * @author ASUS
 */
public class EditPanel extends javax.swing.JPanel {

    /**
     * Creates new form Tabel
     */
    public EditPanel() {
        initComponents();
    }
    
    private TableUpdate update;
    public EditPanel(TableUpdate update) {
        this.update = update;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        dateField = new com.toedter.calendar.JDateChooser();
        changeButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        categoryField = new javax.swing.JTextField();
        amountField = new javax.swing.JTextField();
        noteField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        idField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        typeField = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(52, 73, 94));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Edit Data tabel");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(69, 69, 69))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Tanggal");

        changeButton.setBackground(new java.awt.Color(51, 204, 0));
        changeButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        changeButton.setForeground(new java.awt.Color(255, 255, 255));
        changeButton.setText("Ubah");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Kategori");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Jumlah");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Catatan");

        amountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountFieldActionPerformed(evt);
            }
        });

        noteField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteFieldActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(153, 153, 153));
        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Batal");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        idField.setEditable(false);
        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("ID");

        typeField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pengeluaran", "Pemasukan" }));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Type");

        deleteButton.setBackground(new java.awt.Color(255, 0, 51));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Hapus");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(56, 56, 56)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8)
                                .addComponent(jLabel7))
                            .addGap(22, 22, 22)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(amountField)
                                .addComponent(noteField)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(19, 19, 19)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(dateField, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                                .addComponent(categoryField))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(changeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(8, 8, 8)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(noteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeButton)
                    .addComponent(cancelButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setData(String strID, Date date, String strType, String strCategory, String strAmount, String strNote) {
        idField.setText(strID);
        dateField.setDate(date);
        typeField.setSelectedItem(strType);
        categoryField.setText(strCategory);
        amountField.setText(strAmount);
        noteField.setText(strNote);
    }
    
    private void amountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountFieldActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        SwingUtilities.getWindowAncestor(this).dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private boolean isEnoughBalance(int newExpenseAmount, int transactionId) {
        int totalIncome = 0;
        int totalExpense = 0;
        int percentageLimit = 100; // default jika tidak ditemukan

        try {
            int month = LocalDate.now().getMonthValue();
            int year = LocalDate.now().getYear();
            String accId = Session.id;

            // Ambil total pemasukan
            String pemasukanQuery = "SELECT IFNULL(SUM(amount), 0) AS total_pemasukan FROM transactions " +
                                 "WHERE account_id = ? AND type = 'pemasukan' AND MONTH(date) = ? AND YEAR(date) = ?";
            ResultSet rs = Database.executeQuery(pemasukanQuery, accId, month, year);
            if (rs != null && rs.next()) {
                totalIncome = rs.getInt("total_pemasukan");
                rs.close();
            }

            // Ambil total pengeluaran (kecuali transaksi yang sedang diedit)
            String pengeluaranQuery = "SELECT IFNULL(SUM(amount), 0) AS total_pengeluaran FROM transactions " +
                                  "WHERE account_id = ? AND type = 'pengeluaran' AND MONTH(date) = ? AND YEAR(date) = ? AND id != ?";
            rs = Database.executeQuery(pengeluaranQuery, accId, month, year, transactionId);
            if (rs != null && rs.next()) {
                totalExpense = rs.getInt("total_pengeluaran");
                rs.close();
            }

            // Ambil limit persentase
            String limitQuery = "SELECT percentage_limit FROM monthly_limit WHERE account_id = ? AND month = ? AND year = ?";
            rs = Database.executeQuery(limitQuery, accId, month, year);
            if (rs != null && rs.next()) {
                percentageLimit = rs.getInt("percentage_limit");
                rs.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        // Hitung batas maksimal pengeluaran
        int maxExpenseAllowed = totalIncome * percentageLimit / 100;

        // Cek apakah pengeluaran baru melampaui batas
        return (totalExpense + newExpenseAmount) <= maxExpenseAllowed;
    }
    
    private boolean isIncomeStillCoversExpense(int newIncomeAmount, int transactionId) {
        int totalExpense = 0;
        int percentageLimit = 100;
        int oldIncomeAmount = 0;

        try {
            LocalDate date = dateField.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            int month = date.getMonthValue();
            int year = date.getYear();
            String accId = Session.id;

            // Ambil total pengeluaran
            String pengeluaranQuery = "SELECT IFNULL(SUM(amount), 0) AS total_pengeluaran FROM transactions " +
                                  "WHERE account_id = ? AND type = 'pengeluaran' AND MONTH(date) = ? AND YEAR(date) = ?";
            ResultSet rs = Database.executeQuery(pengeluaranQuery, accId, month, year);
            if (rs != null && rs.next()) {
                totalExpense = rs.getInt("total_pengeluaran");
                rs.close();
            }

            // Ambil limit persentase
            String limitQuery = "SELECT percentage_limit FROM monthly_limit WHERE account_id = ? AND month = ? AND year = ?";
            rs = Database.executeQuery(limitQuery, accId, month, year);
            if (rs != null && rs.next()) {
                percentageLimit = rs.getInt("percentage_limit");
                rs.close();
            }

            // Ambil jumlah pemasukan lama (yang sedang diedit)
            String oldIncomeQuery = "SELECT amount FROM transactions WHERE id = ? AND type = 'pemasukan'";
            rs = Database.executeQuery(oldIncomeQuery, transactionId);
            if (rs != null && rs.next()) {
                oldIncomeAmount = rs.getInt("amount");
                rs.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        // Hitung total pemasukan baru (mengganti pemasukan lama dengan yang baru)
        int newTotalIncome = getCurrentTotalIncomeExcluding(transactionId) + newIncomeAmount;

        // Hitung batas maksimal pengeluaran yang diizinkan
        int maxExpenseAllowed = newTotalIncome * percentageLimit / 100;

        return totalExpense <= maxExpenseAllowed;
    }

    // Helper untuk ambil total pemasukan selain transaksi yang sedang diedit
    private int getCurrentTotalIncomeExcluding(int excludeId) {
        int total = 0;
        try {
            LocalDate date = dateField.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            int month = date.getMonthValue();
            int year = date.getYear();
            String accId = Session.id;

            String query = "SELECT IFNULL(SUM(amount), 0) AS total_pemasukan FROM transactions " +
                           "WHERE account_id = ? AND type = 'pemasukan' AND MONTH(date) = ? AND YEAR(date) = ? AND id != ?";
            ResultSet rs = Database.executeQuery(query, accId, month, year, excludeId);
            if (rs != null && rs.next()) {
                total = rs.getInt("total_pemasukan");
                rs.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return total;
    }

    
    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        String dateStr = new SimpleDateFormat("yyyy-MM-dd").format(dateField.getDate());
        String type = typeField.getSelectedItem().toString();
        String category = categoryField.getText();
        int amount = Integer.parseInt(amountField.getText());
        String note = noteField.getText();
        int id = Integer.parseInt(idField.getText());

        try {
            // Validasi berdasarkan tipe transaksi
            if (type.equalsIgnoreCase("pengeluaran")) {
                if (!isEnoughBalance(amount, id)) {
                    JOptionPane.showMessageDialog(this, "Pengeluaran melebihi batas limit bulanan!");
                    return;
                }
            } else if (type.equalsIgnoreCase("pemasukan")) {
                if (!isIncomeStillCoversExpense(amount, id)) {
                    JOptionPane.showMessageDialog(this, "Perubahan pemasukan terlalu kecil. Total limit (dari persentase pemasukan) akan lebih kecil dari total pengeluaran.");
                    return;
                }
            }

            // Eksekusi update
            String query = "UPDATE transactions SET date='" + dateStr +
                           "', type='" + type +
                           "', category='" + category +
                           "', amount=" + amount +
                           ", note='" + note +
                           "' WHERE id=" + id;

            int updated = Database.executeUpdate(query);

            if (updated > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil diubah.");
                SwingUtilities.getWindowAncestor(this).dispose();
                update.loadTableData();
                update.loadTotal();
                update.loadChart();

                if (update instanceof Home) {
                    ((Home) update).loadLimitBar();
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating: " + e.getMessage());
        }
    }//GEN-LAST:event_changeButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                int id = Integer.parseInt(idField.getText());

                // Ambil informasi transaksi yang akan dihapus
                String type = "";
                int amount = 0;
                String queryInfo = "SELECT type, amount FROM transactions WHERE id = ?";
                ResultSet rs = Database.executeQuery(queryInfo, id);
                if (rs != null && rs.next()) {
                    type = rs.getString("type");
                    amount = rs.getInt("amount");
                    rs.close();
                } else {
                    JOptionPane.showMessageDialog(this, "Data tidak ditemukan.");
                    return;
                }

                // Validasi jika yang dihapus adalah pemasukan
                if (type.equalsIgnoreCase("pemasukan")) {
                    if (!isIncomeStillCoversExpense(amount, id)) {
                        JOptionPane.showMessageDialog(this, "Penghapusan pemasukan ini menyebabkan total pengeluaran melebihi limit.");
                        return;
                    }
                }

                // Lakukan penghapusan
                String query = "DELETE FROM transactions WHERE id = ?";
                int deleted = Database.executeUpdate(query, id);

                if (deleted > 0) {
                    JOptionPane.showMessageDialog(this, "Data berhasil dihapus.");
                    SwingUtilities.getWindowAncestor(this).dispose();

                    update.loadTableData();
                    update.loadTotal();
                    update.loadChart();

                    if (update instanceof Home) {
                        ((Home) update).loadLimitBar();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menghapus data.");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error deleting: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void noteFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noteFieldActionPerformed

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField categoryField;
    private javax.swing.JButton changeButton;
    private com.toedter.calendar.JDateChooser dateField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JTextField noteField;
    private javax.swing.JComboBox<String> typeField;
    // End of variables declaration//GEN-END:variables
}
